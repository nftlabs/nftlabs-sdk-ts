{
  "BundleDropModule": {
    "name": "BundleDropModule",
    "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getBundleDropModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n// The token ID of the NFT you want to check the wallets balance of\nconst tokenId = \"0\"\n\nconst balance = await module.balanceOf(address, tokenId);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string, tokenId: BigNumberish): Promise<BigNumber>;"
      },
      {
        "name": "claimTo",
        "summary": "Claim NFTs to Wallet\n\n",
        "remarks": "\n\nLet the a specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to claim the NFTs\nconst address = \"{{wallet_address}}\";\n\n// The number of NFTs to claim\nconst quantity = 1;\n\n// The token ID of the NFT you want to claim\nconst tokenId = \"0\"\n\nawait module.claimTo(tokenId, quantity, address);"
        },
        "signature": "claimTo(tokenId: BigNumberish, quantity: BigNumberish, addressToClaim: string, proofs?: BytesLike[]): Promise<TransactionReceipt>;"
      },
      {
        "name": "createBatch",
        "summary": "Create Many NFTs\n\n",
        "remarks": "\n\nCreate and mint NFTs.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}];\n\nawait module.createBatch(metadatas);"
        },
        "signature": "createBatch(metadatas: MetadataURIOrObject[]): Promise<string[]>;"
      },
      {
        "name": "getAll",
        "summary": "Get NFT Data\n\n",
        "remarks": "\n\nGet data associated with NFTs in this module.\n\n",
        "examples": {
          "javascript": "// Get data associated with every NFT in the module\nconst nfts = await module.getAll();\nconsole.log(nfts);"
        },
        "signature": "getAll(): Promise<BundleDropMetadata[]>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"0x...\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n\n// The number of NFTs you want to send\nconst amount = 1;\n\nawait module.transfer(toAddress, tokenId, amount);"
        },
        "signature": "transfer(to: string, tokenId: BigNumberish, amount: BigNumberish, data?: BytesLike): Promise<TransactionReceipt>;"
      }
    ],
    "signature": "export declare class BundleDropModule extends ModuleWithRoles<BundleDrop> implements ITransferable "
  },
  "BundleModule": {
    "name": "BundleModule",
    "summary": "Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getBundleModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n// The token ID of the NFT you want to check the wallets balance of\nconst tokenId = \"0\"\n\nconst balance = await module.balanceOf(address, tokenId);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string, tokenId: string): Promise<BigNumber>;"
      },
      {
        "name": "burn",
        "summary": "Burn NFT\n\n",
        "remarks": "\n\nBurn an NFT, permanently taking it out of circulation and reducing the supply.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to burn\nconst tokenId = 0;\n// The number of specified NFTs you want to burn\nconst amount = 1\n\nawait module.burn({ tokenId, amount });"
        },
        "signature": "burn(args: INFTBundleBatchArgs): Promise<TransactionReceipt>;"
      },
      {
        "name": "createAndMint",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT with a specified supply.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1, // The number of this NFT you want to mint\n}\n\nawait module.createAndMint(metadataWithSupply);"
        },
        "signature": "createAndMint(metadataWithSupply: INFTBundleCreateArgs): Promise<BundleMetadata>;"
      },
      {
        "name": "createAndMintBatch",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many different NFTs with specified supplies.\n\n",
        "examples": {
          "javascript": "// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 1, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 1,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nawait module.createAndMintBatch(metadataWithSupply);"
        },
        "signature": "createAndMintBatch(metadataWithSupply: INFTBundleCreateArgs[]): Promise<BundleMetadata[]>;"
      },
      {
        "name": "getAll",
        "summary": "Get NFT Data\n\n",
        "remarks": "\n\nGet data associated with NFTs in this module.\n\n",
        "examples": {
          "javascript": "// You can get every NFT in the module\nconst nfts = await module.getAll();\nconsole.log(nfts);\n\n// Or you can get optionally get the NFTs owned by a specific wallet\nconst address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\nconst ownedNfts = await module.getAll(address);\nconsole.log(ownedNfts);"
        },
        "signature": "getAll(address?: string): Promise<BundleMetadata[]>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"0x...\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n\n// The number of NFTs you want to send\nconst amount = 1;\n\nawait module.transfer(toAddress, tokenId, amount);"
        },
        "signature": "transfer(to: string, tokenId: string, amount: BigNumberish): Promise<TransactionReceipt>;"
      },
      {
        "name": "transferBatchFrom",
        "summary": "Transfer Many NFTs\n\n",
        "remarks": "\n\nTransfer NFTs from the one wallet to another.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to send the NFT from\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the NFT to\nconst toAddress = \"0x...\";\n\n// The data of the NFTs you want to send\nconst data = [{\n  tokenId: 1, // The token ID of the NFT you want to send\n  amount: 1, // The number of this NFT you want to send\n}, {\n  tokenId: 2,\n  amount: 1,\n}]\n\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait module.transferBatchFrom(fromAddress, toAddress, data);"
        },
        "signature": "transferBatchFrom(from: string, to: string, args: INFTBundleBatchArgs[], data?: BytesLike): Promise<TransactionReceipt>;"
      }
    ],
    "signature": "export declare class BundleModule extends ModuleWithRoles<NFTBundleContract> implements ITransferable "
  },
  "DropModule": {
    "name": "DropModule",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "remarks": "\n\nThe constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `DropModule` class.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getDropModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this module owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n\nconst balance = await module.balanceOf(address);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string): Promise<BigNumber>;"
      },
      {
        "name": "canClaim",
        "summary": "Can Claim\n\n",
        "remarks": "\n\nCheck if the drop can currently be claimed.\n\n",
        "examples": {
          "javascript": "// Quantity of tokens to check if they are claimable\nconst quantity = 1;\n\nawait module.canClaim(quantity);"
        },
        "signature": "canClaim(quantity: BigNumberish, addressToCheck?: string): Promise<boolean>;"
      },
      {
        "name": "claimTo",
        "summary": "Claim NFTs to Wallet\n\n",
        "remarks": "\n\nLet the a specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to claim the NFTs\nconst address = \"{{wallet_address}}\";\n\n// The number of NFTs to claim\nconst quantity = 1;\n\nawait module.claimTo(quantity, address);"
        },
        "signature": "claimTo(quantity: BigNumberish, addressToClaim: string, proofs?: BytesLike[]): Promise<TransactionReceipt>;"
      },
      {
        "name": "getAll",
        "summary": "Get All NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this module.\n\n",
        "examples": {
          "javascript": "const nfts = await module.getAll();\nconsole.log(nfts);"
        },
        "signature": "getAll(queryParams?: QueryAllParams): Promise<NFTMetadataOwner[]>;"
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await module.getOwned(address);\nconsole.log(nfts);"
        },
        "signature": "getOwned(_address?: string): Promise<NFTMetadataOwner[]>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n\nawait module.transfer(toAddress, tokenId);"
        },
        "signature": "transfer(to: string, tokenId: string): Promise<TransactionReceipt>;"
      }
    ],
    "signature": "export declare class DropModule extends ModuleWithRoles<DropV2> implements ITransferable "
  },
  "MarketplaceModule": {
    "name": "MarketplaceModule",
    "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getMarketplaceModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "buyoutAuctionListing",
        "summary": "Buyout Auction\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nconst balance = await module.balanceOf(listingId, quantity);\nconsole.log(balance);"
        },
        "signature": "buyoutAuctionListing(listingId: BigNumberish): Promise<void>;"
      },
      {
        "name": "buyoutDirectListing",
        "summary": "Buy Listing\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait module.buyoutDirectListing({ listingId, quantityDesired });"
        },
        "signature": "buyoutDirectListing(_buyout: {\n        listingId: BigNumberish;\n        quantityDesired: BigNumberish;\n    }): Promise<void>;"
      },
      {
        "name": "cancelAuctionListing",
        "summary": "Cancel Auction Listing\n\n",
        "remarks": "\n\nCancel an auction listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\"\n\nawait module.cancelAuctionListing(listingId);"
        },
        "signature": "cancelAuctionListing(listingId: BigNumberish): Promise<void>;"
      },
      {
        "name": "cancelDirectListing",
        "summary": "Cancel Direct Listing\n\n",
        "remarks": "\n\nCancel a direct listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\"\n\nawait module.cancelDirectListing(listingId);"
        },
        "signature": "cancelDirectListing(listingId: BigNumberish): Promise<void>;"
      },
      {
        "name": "createAuctionListing",
        "summary": "Create Auction\n\n",
        "remarks": "\n\nCreate a new auction where people can bid on an asset.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds with the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1\",\n}\n\nawait module.createAuctionListing(auction);"
        },
        "signature": "createAuctionListing(listing: NewAuctionListing): Promise<BigNumber>;"
      },
      {
        "name": "createDirectListing",
        "summary": "Create Direct Listing\n\n",
        "remarks": "\n\nCreate a new listing on the marketplace where people can buy an asset directly.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds with the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1\",\n}\n\nawait module.createDirectListing(listing);"
        },
        "signature": "createDirectListing(listing: NewDirectListing): Promise<BigNumber>;"
      },
      {
        "name": "getAuctionWinner",
        "summary": "Get Auction Winner\n\n",
        "remarks": "\n\nGet the winner of the auction after an auction ends.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\nmodule\n  .getAuctionWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));"
        },
        "signature": "getAuctionWinner(listingId: BigNumberish): Promise<string>;"
      },
      {
        "name": "getWinningBid",
        "summary": "Get Highest Bid\n\n",
        "remarks": "\n\nGet the current highest bid of an active auction.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\nmodule\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));"
        },
        "signature": "getWinningBid(listingId: BigNumberish): Promise<Offer | undefined>;"
      },
      {
        "name": "makeAuctionListingBid",
        "summary": "Bid On Auction\n\n",
        "remarks": "\n\nMake a bid on an auction listings\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst bidPricePerToken = 1;\n\nawait module.buyoutDirectListing(listingId, bidPricePerToken);"
        },
        "signature": "makeAuctionListingBid(bid: {\n        listingId: BigNumberish;\n        pricePerToken: BigNumberish;\n    }): Promise<void>;"
      }
    ],
    "signature": "export declare class MarketplaceModule extends ModuleWithRoles<Marketplace> implements IMarketplace "
  },
  "NFTModule": {
    "name": "NFTModule",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getNFTModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this module owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n\nconst balance = await module.balanceOf(address);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string): Promise<BigNumber>;"
      },
      {
        "name": "burn",
        "summary": "Burn NFT\n\n",
        "remarks": "\n\nBurn an NFT, permanently taking it out of circulation and reducing the supply.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to burn\nconst tokenId = 0;\n\nawait module.burn(tokenId);"
        },
        "signature": "burn(tokenId: BigNumberish): Promise<TransactionReceipt>;"
      },
      {
        "name": "getAll",
        "summary": "Get All NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this module.\n\n",
        "examples": {
          "javascript": "const nfts = await module.getAll();\nconsole.log(nfts);"
        },
        "signature": "getAll(): Promise<NFTMetadata[]>;"
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await module.getOwned(address);\nconsole.log(nfts);"
        },
        "signature": "getOwned(_address?: string): Promise<NFTMetadata[]>;"
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nawait module.mintBatchTo(toAddress, metadatas);"
        },
        "signature": "mintBatchTo(to: string, metadatas: MetadataURIOrObject[]): Promise<NFTMetadata[]>;"
      },
      {
        "name": "mintTo",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nawait module.mintTo(toAddress, metadata);"
        },
        "signature": "mintTo(to: string, metadata: MetadataURIOrObject): Promise<NFTMetadata>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n\nawait module.transfer(toAddress, tokenId);"
        },
        "signature": "transfer(to: string, tokenId: string): Promise<TransactionReceipt>;"
      }
    ],
    "signature": "export declare class NFTModule extends ModuleWithRoles<SignatureMint721> implements ITransferable, ISignatureMinter "
  },
  "PackModule": {
    "name": "PackModule",
    "summary": "Create lootboxes of NFTs with rarity based open mechanics.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getPackModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Pack Balance\n\n",
        "remarks": "\n\nGet a wallets pack balance (number of a specific packs in this module owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check pack balance\nconst address = \"{{wallet_address}}\"\";\n// The token ID of the pack you want to check the wallets balance of\nconst tokenId = \"0\"\n\nconst balance = await module.balanceOf(address, tokenId);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string, tokenId: string): Promise<BigNumber>;"
      },
      {
        "name": "create",
        "summary": "Create Pack\n\n",
        "remarks": "\n\nCreate a new pack with its own rewards.\n\n",
        "examples": {
          "javascript": "// Data to create the pack\nconst pack = {\n  // The address of the contract that holds the rewards you want to include\n  assetContract: \"0x...\",\n  // The metadata of the pack\n  metadata: {\n    name: \"Cool Pack\",\n    description: \"This is a cool pack\",\n    // This can be an image url or image file\n    image: readFileSync(\"path/to/image.png\"),\n  },\n  // The NFTs you want to include in the pack\n  assets: [\n    {\n      tokenId: 0, // The token ID of the asset you want to add\n      amount: 1, // The amount of the asset you want to add\n    }, {\n      tokenId: 1,\n      amount: 1,\n    }\n  ],\n};\n\nawait module.create(pack);"
        },
        "signature": "create(args: IPackCreateArgs): Promise<PackMetadata>;"
      },
      {
        "name": "getAll",
        "summary": "Get Pack Data\n\n",
        "remarks": "\n\nGet data associated with every pack in this module.\n\n",
        "examples": {
          "javascript": "const packs = await module.getAll();\nconsole.log(packs);"
        },
        "signature": "getAll(): Promise<PackMetadata[]>;"
      },
      {
        "name": "getNFTs",
        "summary": "Get Pack Reward Data\n\n",
        "remarks": "\n\nGet data associated with the rewards inside a specified pack\n\n",
        "examples": {
          "javascript": "// The pack ID of the pack whos rewards you want to get\nconst packId = 0;\n\nconst nfts = await module.getNFTs(packId);\nconsole.log(nfts);"
        },
        "signature": "getNFTs(packId: string): Promise<PackNFTMetadata[]>;"
      },
      {
        "name": "open",
        "summary": "Open Pack\n\n",
        "remarks": "\n\nOpen a pack to burn it and obtain the reward asset inside.\n\n",
        "examples": {
          "javascript": "// The pack ID of the asset you want to buy\nconst packId = \"0\";\nconst rewards = await module.open(packId);\nconsole.log(rewards);"
        },
        "signature": "open(packId: string): Promise<NFTMetadata[]>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer Pack\n\n",
        "remarks": "\n\nTransfer a pack from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the pack to\nconst toAddress = \"0x...\";\n\n// The token ID of the pack you want to send\nconst tokenId = \"0\";\n\n// The number of packs you want to send\nconst amount = 1;\n\nawait module.transfer(toAddress, tokenId, amount);"
        },
        "signature": "transfer(to: string, tokenId: string, amount: BigNumber): Promise<void>;"
      }
    ],
    "signature": "export declare class PackModule extends ModuleWithRoles<PackContract> implements ITransferable "
  },
  "SplitsModule": {
    "name": "SplitsModule",
    "summary": "Create custom royalty splits to distribute funds.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getSplitsModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Funds\n\n",
        "remarks": "\n\nGet the amount of funds in the native currency held by the module thats owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await module.balanceOf(address);\nconsole.log(funds);"
        },
        "signature": "balanceOf(address: string): Promise<BigNumber>;"
      },
      {
        "name": "balanceOfToken",
        "summary": "Get Token Funds\n\n",
        "remarks": "\n\nGet the amount of funds in the non-native tokens held by the module thats owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await module.balanceOfToken(address, tokenAddress);\nconsole.log(funds);"
        },
        "signature": "balanceOfToken(walletAddress: string, tokenAddress: string): Promise<CurrencyValue>;"
      },
      {
        "name": "distribute",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "await module.distribute();"
        },
        "signature": "distribute(): Promise<void>;"
      },
      {
        "name": "distributeToken",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait module.distributeToken(tokenAddress);"
        },
        "signature": "distributeToken(tokenAddress: string): Promise<void>;"
      },
      {
        "name": "getAllRecipients",
        "summary": "Get Recipients\n\n",
        "remarks": "\n\nGet the data about the shares of every split recipient on the module\n\n",
        "examples": {
          "javascript": "const recipients = await module.getAllRecepients();\nconsole.log(recipients);"
        },
        "signature": "getAllRecipients(): Promise<SplitRecipient[]>;"
      }
    ],
    "signature": "export declare class SplitsModule extends Module<Royalty> implements ISplitsModule "
  },
  "TokenModule": {
    "name": "TokenModule",
    "summary": "Create a standard crypto token or crypto currency.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getTokenModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst address = \"{{wallet_address}}\";\n\n// Address of the wallet to check token allowance\nconst otherAddress = \"0x...\";\n\nconst allowance = await module.allowanceOf(otherAddress);\nconsole.log(allowance);"
        },
        "signature": "allowanceOf(owner: string, spender: string): Promise<BigNumber>;"
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst address = \"{{wallet_address}}\";\n\nconst balance = await module.balanceOf(address);\nconsole.log(balance);"
        },
        "signature": "balanceOf(address: string): Promise<CurrencyValue>;"
      },
      {
        "name": "burn",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
        "examples": {
          "javascript": "// The amount of this token you want to burn\nconst amount = 100;\n\nawait module.burn(amount);"
        },
        "signature": "burn(amount: BigNumberish): Promise<TransactionReceipt>;"
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens to many different wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    address: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   address: \"0x...\",\n   amount: 100,\n }\n]\n\nawait module.transfer(toAddress, amount);"
        },
        "signature": "mintBatchTo(args: ITokenMintArgs[]): Promise<void>;"
      },
      {
        "name": "mintTo",
        "summary": "Mint Tokens\n\n",
        "remarks": "\n\nMint tokens to a specified address\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the tokens to\nconst toAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to mint\nconst amount = 100;\n\nawait module.transfer(toAddress, amount);"
        },
        "signature": "mintTo(to: string, amount: BigNumberish): Promise<void>;"
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n\n// The amount of tokens you want to send\nconst amount = 0;\n\nawait module.transfer(toAddress, amount);"
        },
        "signature": "transfer(to: string, amount: BigNumberish): Promise<TransactionReceipt>;"
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 100\n\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait module.transferFrom(fromAddress, toAddress, amount);"
        },
        "signature": "transferFrom(from: string, to: string, amount: BigNumberish): Promise<TransactionReceipt>;"
      }
    ],
    "signature": "export declare class TokenModule extends ModuleWithRoles<Coin> implements ITransferable "
  },
  "VoteModule": {
    "name": "VoteModule",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getVoteModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await module.canExecute(proposalId);\nconsole.log(canExecute);"
        },
        "signature": "canExecute(proposalId: string): Promise<boolean>;"
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait module.execute(proposalId);"
        },
        "signature": "execute(proposalId: string): Promise<void>;"
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this module.\n\n",
        "examples": {
          "javascript": "const proposals = await module.getAll();\nconsole.log(proposals);"
        },
        "signature": "getAll(): Promise<Proposal[]>;"
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait module.hasVoted(proposalId, address);"
        },
        "signature": "hasVoted(proposalId: string, account?: string): Promise<boolean>;"
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token module (which you would need to setup in code)\n    transactionData: tokenModule.contract.interface.encodeFunctionData(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await module.propose(description, executions);"
        },
        "signature": "propose(description: string, executions?: ProposalExecutable[]): Promise<BigNumber>;"
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait module.vote(proposalId, voteType, reason);"
        },
        "signature": "vote(proposalId: string, voteType: VoteType, reason?: string): Promise<void>;"
      }
    ],
    "signature": "export declare class VoteModule extends Module<VotingGovernor> "
  }
}