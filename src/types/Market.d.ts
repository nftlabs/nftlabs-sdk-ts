/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "_contractURI()": FunctionFragment;
    "addToListing(uint256,uint256)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getAllListings()": FunctionFragment;
    "getListing(uint256)": FunctionFragment;
    "getListingsByAsset(address,uint256)": FunctionFragment;
    "getListingsByAssetContract(address)": FunctionFragment;
    "getListingsBySeller(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "list(address,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "listings(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalListings()": FunctionFragment;
    "unlist(uint256,uint256)": FunctionFragment;
    "updateListingParams(uint256,uint256,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsByAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsByAssetContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsBySeller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingParams",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingsByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingsByAssetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingsBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListingParams",
    data: BytesLike
  ): Result;

  events: {
    "ListingUpdate(address,uint256,tuple)": EventFragment;
    "MarketFeesUpdated(uint256,uint256)": EventFragment;
    "NewListing(address,address,uint256,tuple)": EventFragment;
    "NewSale(address,address,uint256,address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ListingUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSale"): EventFragment;
}

export type ListingUpdateEvent = TypedEvent<
  [
    string,
    BigNumber,
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    }
  ] & {
    seller: string;
    listingId: BigNumber;
    listing: [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    };
  }
>;

export type MarketFeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    protocolFeeBps: BigNumber;
    creatorFeeBps: BigNumber;
  }
>;

export type NewListingEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    }
  ] & {
    assetContract: string;
    seller: string;
    listingId: BigNumber;
    listing: [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    };
  }
>;

export type NewSaleEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    }
  ] & {
    assetContract: string;
    seller: string;
    listingId: BigNumber;
    buyer: string;
    quanitytBought: BigNumber;
    listing: [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    };
  }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    _contractURI(overrides?: CallOverrides): Promise<[string]>;

    addToListing(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buy(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getAllListings(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[]
      ] & {
        allListings: ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[];
      }
    >;

    getListing(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ] & {
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    getListingsByAsset(
      _assetContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[]
      ] & {
        tokenListings: ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[];
      }
    >;

    getListingsByAssetContract(
      _assetContract: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[]
      ] & {
        tokenListings: ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[];
      }
    >;

    getListingsBySeller(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[]
      ] & {
        sellerListings: ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        })[];
      }
    >;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    list(
      _assetContract: string,
      _tokenId: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _quantity: BigNumberish,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setContractURI(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlist(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateListingParams(
      _listingId: BigNumberish,
      _pricePerToken: BigNumberish,
      _currency: string,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _contractURI(overrides?: CallOverrides): Promise<string>;

  addToListing(
    _listingId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buy(
    _listingId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getAllListings(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    })[]
  >;

  getListing(
    _listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    }
  >;

  getListingsByAsset(
    _assetContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    })[]
  >;

  getListingsByAssetContract(
    _assetContract: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    })[]
  >;

  getListingsBySeller(
    _seller: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    })[]
  >;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(
    _assetContract: string,
    _tokenId: BigNumberish,
    _currency: string,
    _pricePerToken: BigNumberish,
    _quantity: BigNumberish,
    _secondsUntilStart: BigNumberish,
    _secondsUntilEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      listingId: BigNumber;
      seller: string;
      assetContract: string;
      tokenId: BigNumber;
      quantity: BigNumber;
      currency: string;
      pricePerToken: BigNumber;
      saleStart: BigNumber;
      saleEnd: BigNumber;
      tokenType: number;
    }
  >;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setContractURI(
    _URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalListings(overrides?: CallOverrides): Promise<BigNumber>;

  unlist(
    _listingId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateListingParams(
    _listingId: BigNumberish,
    _pricePerToken: BigNumberish,
    _currency: string,
    _secondsUntilStart: BigNumberish,
    _secondsUntilEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _contractURI(overrides?: CallOverrides): Promise<string>;

    addToListing(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getAllListings(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      })[]
    >;

    getListing(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      }
    >;

    getListingsByAsset(
      _assetContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      })[]
    >;

    getListingsByAssetContract(
      _assetContract: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      })[]
    >;

    getListingsBySeller(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      })[]
    >;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(
      _assetContract: string,
      _tokenId: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _quantity: BigNumberish,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        listingId: BigNumber;
        seller: string;
        assetContract: string;
        tokenId: BigNumber;
        quantity: BigNumber;
        currency: string;
        pricePerToken: BigNumber;
        saleStart: BigNumber;
        saleEnd: BigNumber;
        tokenType: number;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setContractURI(_URI: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalListings(overrides?: CallOverrides): Promise<BigNumber>;

    unlist(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListingParams(
      _listingId: BigNumberish,
      _pricePerToken: BigNumberish,
      _currency: string,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ListingUpdate(address,uint256,tuple)"(
      seller?: string | null,
      listingId?: BigNumberish | null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        seller: string;
        listingId: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    ListingUpdate(
      seller?: string | null,
      listingId?: BigNumberish | null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        seller: string;
        listingId: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    "MarketFeesUpdated(uint256,uint256)"(
      protocolFeeBps?: null,
      creatorFeeBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { protocolFeeBps: BigNumber; creatorFeeBps: BigNumber }
    >;

    MarketFeesUpdated(
      protocolFeeBps?: null,
      creatorFeeBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { protocolFeeBps: BigNumber; creatorFeeBps: BigNumber }
    >;

    "NewListing(address,address,uint256,tuple)"(
      assetContract?: string | null,
      seller?: string | null,
      listingId?: BigNumberish | null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        assetContract: string;
        seller: string;
        listingId: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    NewListing(
      assetContract?: string | null,
      seller?: string | null,
      listingId?: BigNumberish | null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        assetContract: string;
        seller: string;
        listingId: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    "NewSale(address,address,uint256,address,uint256,tuple)"(
      assetContract?: string | null,
      seller?: string | null,
      listingId?: BigNumberish | null,
      buyer?: null,
      quanitytBought?: null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        assetContract: string;
        seller: string;
        listingId: BigNumber;
        buyer: string;
        quanitytBought: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;

    NewSale(
      assetContract?: string | null,
      seller?: string | null,
      listingId?: BigNumberish | null,
      buyer?: null,
      quanitytBought?: null,
      listing?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        }
      ],
      {
        assetContract: string;
        seller: string;
        listingId: BigNumber;
        buyer: string;
        quanitytBought: BigNumber;
        listing: [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          listingId: BigNumber;
          seller: string;
          assetContract: string;
          tokenId: BigNumber;
          quantity: BigNumber;
          currency: string;
          pricePerToken: BigNumber;
          saleStart: BigNumber;
          saleEnd: BigNumber;
          tokenType: number;
        };
      }
    >;
  };

  estimateGas: {
    _contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    addToListing(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buy(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getAllListings(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingsByAsset(
      _assetContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingsByAssetContract(
      _assetContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingsBySeller(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      _assetContract: string,
      _tokenId: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _quantity: BigNumberish,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractURI(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalListings(overrides?: CallOverrides): Promise<BigNumber>;

    unlist(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateListingParams(
      _listingId: BigNumberish,
      _pricePerToken: BigNumberish,
      _currency: string,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToListing(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListing(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingsByAsset(
      _assetContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingsByAssetContract(
      _assetContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingsBySeller(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      _assetContract: string,
      _tokenId: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _quantity: BigNumberish,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlist(
      _listingId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateListingParams(
      _listingId: BigNumberish,
      _pricePerToken: BigNumberish,
      _currency: string,
      _secondsUntilStart: BigNumberish,
      _secondsUntilEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
